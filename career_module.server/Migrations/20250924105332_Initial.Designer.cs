// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using career_module.server.Infrastructure.Data;

#nullable disable

namespace career_module.server.Migrations
{
    [DbContext(typeof(CareerManagementDbContext))]
    [Migration("20250924105332_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("career_module.server.Models.Entities.CareerPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromPositionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinPerformanceRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("MinTotalExperience")
                        .HasColumnType("int");

                    b.Property<int>("MinYearsInCurrentRole")
                        .HasColumnType("int");

                    b.Property<string>("RequiredCertifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredEducationLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ToPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ToPositionId");

                    b.HasIndex("FromPositionId", "ToPositionId")
                        .IsUnique()
                        .HasDatabaseName("IX_CareerPath_From_To")
                        .HasFilter("[FromPositionId] IS NOT NULL");

                    b.ToTable("CareerPaths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 1,
                            Description = "Path from Developer to Manager",
                            FromPositionId = 3,
                            IsActive = true,
                            MinPerformanceRating = 4m,
                            MinTotalExperience = 0,
                            MinYearsInCurrentRole = 2,
                            ToPositionId = 4,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 1,
                            Description = "Path from HR Rep to Administrator",
                            FromPositionId = 2,
                            IsActive = true,
                            MinPerformanceRating = 3m,
                            MinTotalExperience = 0,
                            MinYearsInCurrentRole = 3,
                            ToPositionId = 1,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.CareerPathSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CareerPathId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MinProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("CareerPathId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("IX_CareerPathSkill_Path_Skill");

                    b.ToTable("CareerPathSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CareerPathId = 1,
                            IsMandatory = true,
                            MinProficiencyLevel = 3,
                            SkillId = 3
                        },
                        new
                        {
                            Id = 2,
                            CareerPathId = 1,
                            IsMandatory = true,
                            MinProficiencyLevel = 3,
                            SkillId = 4
                        },
                        new
                        {
                            Id = 3,
                            CareerPathId = 2,
                            IsMandatory = true,
                            MinProficiencyLevel = 4,
                            SkillId = 7
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HeadOfDepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Administrative functions",
                            IsActive = true,
                            Name = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "HR and people management",
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Software development and engineering",
                            IsActive = true,
                            Name = "Engineering"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sales and business development",
                            IsActive = true,
                            Name = "Sales"
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CurrentPositionId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPositionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPositionId = 1,
                            DepartmentId = 1,
                            FirstName = "Admin",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "User",
                            Phone = "555-0001",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPositionId = 2,
                            DepartmentId = 2,
                            FirstName = "HR",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Representative",
                            ManagerId = 1,
                            Phone = "555-0002",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPositionId = 3,
                            DepartmentId = 3,
                            FirstName = "John",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Employee",
                            ManagerId = 4,
                            Phone = "555-0003",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPositionId = 4,
                            DepartmentId = 3,
                            FirstName = "Jane",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Manager",
                            ManagerId = 1,
                            Phone = "555-0004",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Degree = "BSc Computer Science",
                            EmployeeId = 3,
                            FieldOfStudy = "Software Engineering",
                            GraduationYear = 2020,
                            Institution = "Tech University",
                            Level = "Bachelor"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Degree = "MSc Human Resources",
                            EmployeeId = 2,
                            FieldOfStudy = "HR Management",
                            GraduationYear = 2018,
                            Institution = "Business School",
                            Level = "Master"
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Startup Inc.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Worked on internal tools",
                            EmployeeId = 3,
                            EndDate = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobTitle = "Intern Developer",
                            StartDate = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Company = "BigCorp",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Led development team",
                            EmployeeId = 4,
                            EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobTitle = "Senior Developer",
                            StartDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedByHRId")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedByManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HRApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ManagerApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("NewManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("NewPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProposedSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int?>("TargetEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByHRId");

                    b.HasIndex("ApprovedByManagerId");

                    b.HasIndex("NewDepartmentId");

                    b.HasIndex("NewManagerId");

                    b.HasIndex("NewPositionId");

                    b.HasIndex("RequestDate")
                        .HasDatabaseName("IX_EmployeeRequest_RequestDate");

                    b.HasIndex("RequestType")
                        .HasDatabaseName("IX_EmployeeRequest_RequestType");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_EmployeeRequest_Status");

                    b.HasIndex("RequesterId", "Status")
                        .HasDatabaseName("IX_EmployeeRequest_Requester_Status");

                    b.HasIndex("TargetEmployeeId", "Status")
                        .HasDatabaseName("IX_EmployeeRequest_Target_Status");

                    b.ToTable("EmployeeRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Justification = "Consistently exceeding expectations",
                            NewPositionId = 4,
                            ProposedSalary = 60000m,
                            RequestDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RequestType = "Promotion",
                            RequesterId = 3,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            ApprovedByManagerId = 4,
                            ManagerApprovalDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            NewDepartmentId = 2,
                            Reason = "Employee requested HR rotation",
                            RequestDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RequestType = "DepartmentChange",
                            RequesterId = 2,
                            Status = "ManagerApproved",
                            TargetEmployeeId = 3
                        },
                        new
                        {
                            Id = 3,
                            RejectionReason = "Budget constraints",
                            RequestDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RequestType = "Training",
                            RequesterId = 3,
                            Status = "Rejected"
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAssessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("EmployeeSkills");

                    b.HasData(
                        new
                        {
                            EmployeeId = 3,
                            SkillId = 1,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastAssessedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Strong backend skills",
                            ProficiencyLevel = 4
                        },
                        new
                        {
                            EmployeeId = 3,
                            SkillId = 2,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastAssessedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Frontend experience",
                            ProficiencyLevel = 3
                        },
                        new
                        {
                            EmployeeId = 4,
                            SkillId = 3,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastAssessedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Excellent leader",
                            ProficiencyLevel = 5
                        },
                        new
                        {
                            EmployeeId = 2,
                            SkillId = 7,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastAssessedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Strong HR communication",
                            ProficiencyLevel = 4
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.PerformanceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreasForImprovement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverallRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Strengths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("PerformanceReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreasForImprovement = "Improve communication",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 3,
                            Goals = "Lead a project in 2024",
                            OverallRating = 4.2m,
                            ReviewPeriodEnd = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerId = 4,
                            Status = "Completed",
                            Strengths = "Great coding ability",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            AreasForImprovement = "Delegate more",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 4,
                            Goals = "Mentor junior staff",
                            OverallRating = 4.5m,
                            ReviewPeriodEnd = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerId = 2,
                            Status = "Completed",
                            Strengths = "Strong leadership",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyPosition")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MaxSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = 1,
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = true,
                            Level = "Senior",
                            Title = "Administrator",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = 2,
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = false,
                            Level = "Mid",
                            Title = "HR Representative",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = 3,
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = false,
                            Level = "Mid",
                            Title = "Software Developer",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = 3,
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = true,
                            Level = "Manager",
                            Title = "Engineering Manager",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Technical",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "C# Programming"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technical",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Management",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Technical",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "SQL Database"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Technical",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "Communication"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            IsActive = true,
                            Name = "Problem Solving"
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.SuccessionCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("MatchScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuccessionPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SuccessionPlanId", "Priority")
                        .IsUnique()
                        .HasDatabaseName("IX_SuccessionCandidate_Plan_Priority");

                    b.ToTable("SuccessionCandidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 3,
                            MatchScore = 85m,
                            Notes = "Promising candidate",
                            Priority = 1,
                            Status = "UnderReview",
                            SuccessionPlanId = 1,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.SuccessionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PositionId");

                    b.ToTable("SuccessionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 1,
                            Notes = "Potential successors for Engineering Manager",
                            PositionId = 4,
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.admin",
                            IsActive = true,
                            PasswordHash = "$2a$11$H49nhtoaRIX.J7mm3rd9H.ew4v69KgMHzCfELwyZbEEkwsfepb4OO",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hr@hr.hr",
                            IsActive = true,
                            PasswordHash = "$2a$11$H49nhtoaRIX.J7mm3rd9H.ew4v69KgMHzCfELwyZbEEkwsfepb4OO",
                            Role = "HR",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "hr"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "employee@employee.employee",
                            IsActive = true,
                            PasswordHash = "$2a$11$H49nhtoaRIX.J7mm3rd9H.ew4v69KgMHzCfELwyZbEEkwsfepb4OO",
                            Role = "Employee",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "employee"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "manager@manager.manager",
                            IsActive = true,
                            PasswordHash = "$2a$11$H49nhtoaRIX.J7mm3rd9H.ew4v69KgMHzCfELwyZbEEkwsfepb4OO",
                            Role = "Manager",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager"
                        });
                });

            modelBuilder.Entity("career_module.server.Models.Entities.CareerPath", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Position", "FromPosition")
                        .WithMany("FromCareerPaths")
                        .HasForeignKey("FromPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Position", "ToPosition")
                        .WithMany("ToCareerPaths")
                        .HasForeignKey("ToPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("FromPosition");

                    b.Navigation("ToPosition");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.CareerPathSkill", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.CareerPath", "CareerPath")
                        .WithMany("RequiredSkills")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Skill", "Skill")
                        .WithMany("CareerPathSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Department", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Employee", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Position", "CurrentPosition")
                        .WithMany("CurrentEmployees")
                        .HasForeignKey("CurrentPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("career_module.server.Models.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Employee", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("career_module.server.Models.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentPosition");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeEducation", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeEducations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeExperience", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeExperiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeRequest", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "ApprovedByHR")
                        .WithMany("RequestsIApprovedAsHR")
                        .HasForeignKey("ApprovedByHRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Employee", "ApprovedByManager")
                        .WithMany("RequestsIApprovedAsManager")
                        .HasForeignKey("ApprovedByManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Department", "NewDepartment")
                        .WithMany()
                        .HasForeignKey("NewDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Employee", "NewManager")
                        .WithMany()
                        .HasForeignKey("NewManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Position", "NewPosition")
                        .WithMany()
                        .HasForeignKey("NewPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Models.Entities.Employee", "Requester")
                        .WithMany("RequestsMade")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Employee", "TargetEmployee")
                        .WithMany("RequestsForMe")
                        .HasForeignKey("TargetEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByHR");

                    b.Navigation("ApprovedByManager");

                    b.Navigation("NewDepartment");

                    b.Navigation("NewManager");

                    b.Navigation("NewPosition");

                    b.Navigation("Requester");

                    b.Navigation("TargetEmployee");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.PerformanceReview", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "Employee")
                        .WithMany("PerformanceReviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Employee", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Position", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.SuccessionCandidate", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.Employee", "Employee")
                        .WithMany("SuccessionCandidates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.SuccessionPlan", "SuccessionPlan")
                        .WithMany("Candidates")
                        .HasForeignKey("SuccessionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SuccessionPlan");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.SuccessionPlan", b =>
                {
                    b.HasOne("career_module.server.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Models.Entities.Position", "Position")
                        .WithMany("SuccessionPlans")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.CareerPath", b =>
                {
                    b.Navigation("RequiredSkills");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Employee", b =>
                {
                    b.Navigation("DirectReports");

                    b.Navigation("EmployeeEducations");

                    b.Navigation("EmployeeExperiences");

                    b.Navigation("EmployeeSkills");

                    b.Navigation("PerformanceReviews");

                    b.Navigation("RequestsForMe");

                    b.Navigation("RequestsIApprovedAsHR");

                    b.Navigation("RequestsIApprovedAsManager");

                    b.Navigation("RequestsMade");

                    b.Navigation("SuccessionCandidates");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Position", b =>
                {
                    b.Navigation("CurrentEmployees");

                    b.Navigation("FromCareerPaths");

                    b.Navigation("SuccessionPlans");

                    b.Navigation("ToCareerPaths");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.Skill", b =>
                {
                    b.Navigation("CareerPathSkills");

                    b.Navigation("EmployeeSkills");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.SuccessionPlan", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("career_module.server.Models.Entities.User", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
