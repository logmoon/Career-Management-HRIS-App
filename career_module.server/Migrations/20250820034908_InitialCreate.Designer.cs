// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using career_module.server.Infrastructure.Data;

#nullable disable

namespace career_module.server.Migrations
{
    [DbContext(typeof(CareerManagementDbContext))]
    [Migration("20250820034908_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("career_module.server.Entities.CareerGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TargetPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TargetPositionId");

                    b.ToTable("CareerGoals");
                });

            modelBuilder.Entity("career_module.server.Entities.DevelopmentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CareerGoalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CareerGoalId");

                    b.ToTable("DevelopmentActions");
                });

            modelBuilder.Entity("career_module.server.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPositionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("career_module.server.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAssessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("career_module.server.Entities.PerformanceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreasForImprovement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverallRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Strengths")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("PerformanceReviews");
                });

            modelBuilder.Entity("career_module.server.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyPosition")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MaxSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinYearsExperience")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "IT",
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = false,
                            Level = "Mid",
                            MinYearsExperience = 2,
                            Title = "Software Developer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "IT",
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = true,
                            Level = "Senior",
                            MinYearsExperience = 5,
                            Title = "Senior Developer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "IT",
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = true,
                            Level = "Lead",
                            MinYearsExperience = 7,
                            Title = "Team Lead"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "HR",
                            Description = "",
                            IsActive = true,
                            IsKeyPosition = false,
                            Level = "Mid",
                            MinYearsExperience = 3,
                            Title = "HR Specialist"
                        });
                });

            modelBuilder.Entity("career_module.server.Entities.PositionSkill", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("PositionId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("PositionSkills");
                });

            modelBuilder.Entity("career_module.server.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Technical",
                            Description = "",
                            IsActive = true,
                            Name = "C# Programming"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technical",
                            Description = "",
                            IsActive = true,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Soft Skills",
                            Description = "",
                            IsActive = true,
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Management",
                            Description = "",
                            IsActive = true,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Technical",
                            Description = "",
                            IsActive = true,
                            Name = "SQL Database"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Technical",
                            Description = "",
                            IsActive = true,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Soft Skills",
                            Description = "",
                            IsActive = true,
                            Name = "Communication"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Soft Skills",
                            Description = "",
                            IsActive = true,
                            Name = "Problem Solving"
                        });
                });

            modelBuilder.Entity("career_module.server.Entities.SuccessionCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("MatchScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuccessionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SuccessionPlanId");

                    b.ToTable("SuccessionCandidates");
                });

            modelBuilder.Entity("career_module.server.Entities.SuccessionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PositionId");

                    b.ToTable("SuccessionPlans");
                });

            modelBuilder.Entity("career_module.server.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@company.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$example",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hr@company.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$example",
                            Role = "HR",
                            Username = "hr_manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.doe@company.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$example",
                            Role = "Employee",
                            Username = "john.doe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jane.smith@company.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$example",
                            Role = "Manager",
                            Username = "jane.smith"
                        });
                });

            modelBuilder.Entity("career_module.server.Entities.CareerGoal", b =>
                {
                    b.HasOne("career_module.server.Entities.Employee", "Employee")
                        .WithMany("CareerGoals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.Position", "TargetPosition")
                        .WithMany("TargetCareerGoals")
                        .HasForeignKey("TargetPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");

                    b.Navigation("TargetPosition");
                });

            modelBuilder.Entity("career_module.server.Entities.DevelopmentAction", b =>
                {
                    b.HasOne("career_module.server.Entities.CareerGoal", "CareerGoal")
                        .WithMany("DevelopmentActions")
                        .HasForeignKey("CareerGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerGoal");
                });

            modelBuilder.Entity("career_module.server.Entities.Employee", b =>
                {
                    b.HasOne("career_module.server.Entities.Position", "CurrentPosition")
                        .WithMany("CurrentEmployees")
                        .HasForeignKey("CurrentPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("career_module.server.Entities.Employee", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("career_module.server.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("career_module.server.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentPosition");

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("career_module.server.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("career_module.server.Entities.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("career_module.server.Entities.PerformanceReview", b =>
                {
                    b.HasOne("career_module.server.Entities.Employee", "Employee")
                        .WithMany("PerformanceReviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.Employee", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("career_module.server.Entities.PositionSkill", b =>
                {
                    b.HasOne("career_module.server.Entities.Position", "Position")
                        .WithMany("RequiredSkills")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.Skill", "Skill")
                        .WithMany("PositionSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("career_module.server.Entities.SuccessionCandidate", b =>
                {
                    b.HasOne("career_module.server.Entities.Employee", "Employee")
                        .WithMany("SuccessionCandidates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.SuccessionPlan", "SuccessionPlan")
                        .WithMany("Candidates")
                        .HasForeignKey("SuccessionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SuccessionPlan");
                });

            modelBuilder.Entity("career_module.server.Entities.SuccessionPlan", b =>
                {
                    b.HasOne("career_module.server.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("career_module.server.Entities.Position", "Position")
                        .WithMany("SuccessionPlans")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("career_module.server.Entities.CareerGoal", b =>
                {
                    b.Navigation("DevelopmentActions");
                });

            modelBuilder.Entity("career_module.server.Entities.Employee", b =>
                {
                    b.Navigation("CareerGoals");

                    b.Navigation("DirectReports");

                    b.Navigation("EmployeeSkills");

                    b.Navigation("PerformanceReviews");

                    b.Navigation("SuccessionCandidates");
                });

            modelBuilder.Entity("career_module.server.Entities.Position", b =>
                {
                    b.Navigation("CurrentEmployees");

                    b.Navigation("RequiredSkills");

                    b.Navigation("SuccessionPlans");

                    b.Navigation("TargetCareerGoals");
                });

            modelBuilder.Entity("career_module.server.Entities.Skill", b =>
                {
                    b.Navigation("EmployeeSkills");

                    b.Navigation("PositionSkills");
                });

            modelBuilder.Entity("career_module.server.Entities.SuccessionPlan", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("career_module.server.Entities.User", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
